---
format_version: '8'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: android
trigger_map:
  - push_branch: '*'
    workflow: primary
  - pull_request_source_branch: "*"
    workflow: primary
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: "."
  - opts:
      is_expand: false
    MODULE: app
  - opts:
      is_expand: false
    VARIANT: ''
  - opts:
      is_expand: false
    GRADLEW_PATH: "./gradlew"
workflows:
  primary:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2: {}
    - script@1:
        title: Do anything with Script step
    - install-missing-android-tools@2:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - android-lint@0:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: app
        - cache_level: all
        - variant: debug
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: app
        - arguments: ''
        - cache_level: all
        - variant: debug
    - android-build-for-ui-testing@0:
        inputs:
        - variant: debug
        - module: app
    - virtual-device-testing-for-android@1:
        inputs:
        - test_type: instrumentation
        - directories_to_pull: "/sdcard/"
        - download_test_results: 'true'
        - environment_variables: |-
            coverage=true
            coverageFile=/sdcard/coverage.ec
        - test_devices: NexusLowRes,29,en,portrait
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_user_groups: none
    - cache-push@2: {}
  deploy:
    description: |
      ## How to get a signed APK

      This workflow contains the **Sign APK** step. To sign your APK all you have to do is to:

      1. Click on **Code Signing** tab
      1. Find the **ANDROID KEYSTORE FILE** section
      1. Click or drop your file on the upload file field
      1. Fill the displayed 3 input fields:
       1. **Keystore password**
       1. **Keystore alias**
       1. **Private key password**
      1. Click on **[Save metadata]** button

      That's it! From now on, **Sign APK** step will receive your uploaded files.

      ## To run this workflow

      If you want to run this workflow manually:

      1. Open the app's build list page
      2. Click on **[Start/Schedule a Build]** button
      3. Select **deploy** in **Workflow** dropdown input
      4. Click **[Start Build]** button

      Or if you need this workflow to be started by a GIT event:

      1. Click on **Triggers** tab
      2. Setup your desired event (push/tag/pull) and select **deploy** workflow
      3. Click on **[Done]** and then **[Save]** buttons

      The next change in your repository that matches any of your trigger map event will start **deploy** workflow.
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2: {}
    - install-missing-android-tools@2:
        inputs:
        - gradlew_path: "$PROJECT_LOCATION/gradlew"
    - android-lint@0:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - variant: release
    - android-unit-test@1:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - variant: release
    - android-build@0:
        inputs:
        - project_location: "$PROJECT_LOCATION"
        - module: "$MODULE"
        - build_type: aab
        - variant: release
    - sign-apk@1:
        run_if: '{{getenv "BITRISEIO_ANDROID_KEYSTORE_URL" | ne ""}}'
        inputs:
        - use_apk_signer: 'true'
    - deploy-to-bitrise-io@1: {}
    - cache-push@2: {}
avd_manager_diagnosis:
    steps:
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\nset -x\nadb kill-server\nadb start-server\n/opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager
            \"--verbose\" \"--channel=0\" \"emulator\"\n/opt/android-sdk-linux/cmdline-tools/tools/bin/sdkmanager
            \"--verbose\" \"system-images;android-30;google_apis_playstore;x86\"\n/opt/android-sdk-linux/cmdline-tools/tools/bin/avdmanager
            \"--verbose\" \"create\" \"avd\" \"--force\" \"--name\" \"emulator\" \"--device\"
            \"pixel_3\" \"--package\" \"system-images;android-30;google_apis_playstore;x86\"
            \"--tag\" \"google_apis_playstore\" \"--abi\" \"x86\" \"--sdcard\" \"512M\"\n\n/opt/android-sdk-linux/emulator/emulator
            @emulator -verbose -show-kernel -no-audio -no-window -no-boot-anim -netdelay
            none -no-snapshot -wipe-data -gpu swiftshader_indirect -camera-back none
            -camera-front none > /dev/null &\n\nchecks=0\nmax_checks=300\npatt=\"emulator-[0-9]{4}[[:space:]]+device\"\nwhile
            true\ndo\n  ((checks++))\n  echo $(adb devices)\n  if [[ \"'$(adb devices)'\"
            =~ $patt ]] ; then \n    echo \"Found device\"\n    export EMULATOR_NAME=$(adb
            devices | grep -Eo 'emulator-[0-9]{4}')\n    echo $EMULATOR_NAME\n    envman
            add --key EMULATOR_SERIAL --value \"$EMULATOR_NAME\"\n    exit 0\n  else
            \n    echo \"no device found\"\n  fi\n\n  if [[ \"$checks\" -ge \"$max_checks\"
            ]]; then\n\t\techo \"Loop Timeout - emulator failed to start\"\n\t\texit
            1\n  fi\n  sleep 1\ndone\n\n\n\n"
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2: {}
    - install-missing-android-tools@2:
        inputs:
        - gradlew_path: "./gradlew"
    - wait-for-android-emulator@1:
        inputs:
        - emulator_serial: "$EMULATOR_SERIAL"
    - script@1:
        inputs:
        - content: "./gradlew cAT"
    - cache-push@2: {}
    - deploy-to-bitrise-io@1:
        inputs:
        - is_enable_public_page: 'false'
